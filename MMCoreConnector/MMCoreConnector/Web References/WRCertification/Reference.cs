//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace MMCoreConnector.WRCertification {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CertificationServiceSoapBinding", Namespace="http://operations.ehealth.mproxy.cmp.com/")]
    public partial class CertificationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback processAuthenticationCertificateResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeCertificationDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback importPKCS12KeyStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastSuccessfullOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getKeyStoreRootPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback prepareEtkRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback processEtkResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteKeyStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback generateEncryptionKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifyEtkOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifyEncodingCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifyAuthenticationCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback generateAuthenticationKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback prepareAuthenticationCertificateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback createEmptyKeyStoreOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CertificationService() {
            this.Url = global::MMCoreConnector.Properties.Settings.Default.MMCoreConnector_WRCertification_CertificationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event processAuthenticationCertificateResponseCompletedEventHandler processAuthenticationCertificateResponseCompleted;
        
        /// <remarks/>
        public event removeCertificationDataCompletedEventHandler removeCertificationDataCompleted;
        
        /// <remarks/>
        public event importPKCS12KeyStoreCompletedEventHandler importPKCS12KeyStoreCompleted;
        
        /// <remarks/>
        public event retrieveCertificateCompletedEventHandler retrieveCertificateCompleted;
        
        /// <remarks/>
        public event getLastSuccessfullOperationCompletedEventHandler getLastSuccessfullOperationCompleted;
        
        /// <remarks/>
        public event getKeyStoreRootPathCompletedEventHandler getKeyStoreRootPathCompleted;
        
        /// <remarks/>
        public event prepareEtkRequestCompletedEventHandler prepareEtkRequestCompleted;
        
        /// <remarks/>
        public event processEtkResponseCompletedEventHandler processEtkResponseCompleted;
        
        /// <remarks/>
        public event deleteKeyStoreCompletedEventHandler deleteKeyStoreCompleted;
        
        /// <remarks/>
        public event generateEncryptionKeysCompletedEventHandler generateEncryptionKeysCompleted;
        
        /// <remarks/>
        public event verifyEtkCompletedEventHandler verifyEtkCompleted;
        
        /// <remarks/>
        public event verifyEncodingCertificateCompletedEventHandler verifyEncodingCertificateCompleted;
        
        /// <remarks/>
        public event verifyAuthenticationCertificateCompletedEventHandler verifyAuthenticationCertificateCompleted;
        
        /// <remarks/>
        public event generateAuthenticationKeysCompletedEventHandler generateAuthenticationKeysCompleted;
        
        /// <remarks/>
        public event prepareAuthenticationCertificateRequestCompletedEventHandler prepareAuthenticationCertificateRequestCompleted;
        
        /// <remarks/>
        public event createEmptyKeyStoreCompletedEventHandler createEmptyKeyStoreCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus processAuthenticationCertificateResponse(string keyLabel, string pinCode, string authenticationCertificate, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] CAauthenticationCertificateChain) {
            object[] results = this.Invoke("processAuthenticationCertificateResponse", new object[] {
                        keyLabel,
                        pinCode,
                        authenticationCertificate,
                        CAauthenticationCertificateChain});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void processAuthenticationCertificateResponseAsync(string keyLabel, string pinCode, string authenticationCertificate, string[] CAauthenticationCertificateChain) {
            this.processAuthenticationCertificateResponseAsync(keyLabel, pinCode, authenticationCertificate, CAauthenticationCertificateChain, null);
        }
        
        /// <remarks/>
        public void processAuthenticationCertificateResponseAsync(string keyLabel, string pinCode, string authenticationCertificate, string[] CAauthenticationCertificateChain, object userState) {
            if ((this.processAuthenticationCertificateResponseOperationCompleted == null)) {
                this.processAuthenticationCertificateResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessAuthenticationCertificateResponseOperationCompleted);
            }
            this.InvokeAsync("processAuthenticationCertificateResponse", new object[] {
                        keyLabel,
                        pinCode,
                        authenticationCertificate,
                        CAauthenticationCertificateChain}, this.processAuthenticationCertificateResponseOperationCompleted, userState);
        }
        
        private void OnprocessAuthenticationCertificateResponseOperationCompleted(object arg) {
            if ((this.processAuthenticationCertificateResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processAuthenticationCertificateResponseCompleted(this, new processAuthenticationCertificateResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus removeCertificationData(string keyLabel, string pinCode) {
            object[] results = this.Invoke("removeCertificationData", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void removeCertificationDataAsync(string keyLabel, string pinCode) {
            this.removeCertificationDataAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void removeCertificationDataAsync(string keyLabel, string pinCode, object userState) {
            if ((this.removeCertificationDataOperationCompleted == null)) {
                this.removeCertificationDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveCertificationDataOperationCompleted);
            }
            this.InvokeAsync("removeCertificationData", new object[] {
                        keyLabel,
                        pinCode}, this.removeCertificationDataOperationCompleted, userState);
        }
        
        private void OnremoveCertificationDataOperationCompleted(object arg) {
            if ((this.removeCertificationDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeCertificationDataCompleted(this, new removeCertificationDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus importPKCS12KeyStore(string keyLabel, string pinCode, string importLocalFileFullName) {
            object[] results = this.Invoke("importPKCS12KeyStore", new object[] {
                        keyLabel,
                        pinCode,
                        importLocalFileFullName});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void importPKCS12KeyStoreAsync(string keyLabel, string pinCode, string importLocalFileFullName) {
            this.importPKCS12KeyStoreAsync(keyLabel, pinCode, importLocalFileFullName, null);
        }
        
        /// <remarks/>
        public void importPKCS12KeyStoreAsync(string keyLabel, string pinCode, string importLocalFileFullName, object userState) {
            if ((this.importPKCS12KeyStoreOperationCompleted == null)) {
                this.importPKCS12KeyStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportPKCS12KeyStoreOperationCompleted);
            }
            this.InvokeAsync("importPKCS12KeyStore", new object[] {
                        keyLabel,
                        pinCode,
                        importLocalFileFullName}, this.importPKCS12KeyStoreOperationCompleted, userState);
        }
        
        private void OnimportPKCS12KeyStoreOperationCompleted(object arg) {
            if ((this.importPKCS12KeyStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importPKCS12KeyStoreCompleted(this, new importPKCS12KeyStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus retrieveCertificate(string keyLabel, string pinCode, string alias) {
            object[] results = this.Invoke("retrieveCertificate", new object[] {
                        keyLabel,
                        pinCode,
                        alias});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveCertificateAsync(string keyLabel, string pinCode, string alias) {
            this.retrieveCertificateAsync(keyLabel, pinCode, alias, null);
        }
        
        /// <remarks/>
        public void retrieveCertificateAsync(string keyLabel, string pinCode, string alias, object userState) {
            if ((this.retrieveCertificateOperationCompleted == null)) {
                this.retrieveCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveCertificateOperationCompleted);
            }
            this.InvokeAsync("retrieveCertificate", new object[] {
                        keyLabel,
                        pinCode,
                        alias}, this.retrieveCertificateOperationCompleted, userState);
        }
        
        private void OnretrieveCertificateOperationCompleted(object arg) {
            if ((this.retrieveCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveCertificateCompleted(this, new retrieveCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus getLastSuccessfullOperation(string keyLabel, string pinCode) {
            object[] results = this.Invoke("getLastSuccessfullOperation", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void getLastSuccessfullOperationAsync(string keyLabel, string pinCode) {
            this.getLastSuccessfullOperationAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void getLastSuccessfullOperationAsync(string keyLabel, string pinCode, object userState) {
            if ((this.getLastSuccessfullOperationOperationCompleted == null)) {
                this.getLastSuccessfullOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastSuccessfullOperationOperationCompleted);
            }
            this.InvokeAsync("getLastSuccessfullOperation", new object[] {
                        keyLabel,
                        pinCode}, this.getLastSuccessfullOperationOperationCompleted, userState);
        }
        
        private void OngetLastSuccessfullOperationOperationCompleted(object arg) {
            if ((this.getLastSuccessfullOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastSuccessfullOperationCompleted(this, new getLastSuccessfullOperationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus getKeyStoreRootPath() {
            object[] results = this.Invoke("getKeyStoreRootPath", new object[0]);
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void getKeyStoreRootPathAsync() {
            this.getKeyStoreRootPathAsync(null);
        }
        
        /// <remarks/>
        public void getKeyStoreRootPathAsync(object userState) {
            if ((this.getKeyStoreRootPathOperationCompleted == null)) {
                this.getKeyStoreRootPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetKeyStoreRootPathOperationCompleted);
            }
            this.InvokeAsync("getKeyStoreRootPath", new object[0], this.getKeyStoreRootPathOperationCompleted, userState);
        }
        
        private void OngetKeyStoreRootPathOperationCompleted(object arg) {
            if ((this.getKeyStoreRootPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getKeyStoreRootPathCompleted(this, new getKeyStoreRootPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus prepareEtkRequest(string keyLabel, string pinCode) {
            object[] results = this.Invoke("prepareEtkRequest", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void prepareEtkRequestAsync(string keyLabel, string pinCode) {
            this.prepareEtkRequestAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void prepareEtkRequestAsync(string keyLabel, string pinCode, object userState) {
            if ((this.prepareEtkRequestOperationCompleted == null)) {
                this.prepareEtkRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprepareEtkRequestOperationCompleted);
            }
            this.InvokeAsync("prepareEtkRequest", new object[] {
                        keyLabel,
                        pinCode}, this.prepareEtkRequestOperationCompleted, userState);
        }
        
        private void OnprepareEtkRequestOperationCompleted(object arg) {
            if ((this.prepareEtkRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.prepareEtkRequestCompleted(this, new prepareEtkRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus processEtkResponse(string keyLabel, string ETK) {
            object[] results = this.Invoke("processEtkResponse", new object[] {
                        keyLabel,
                        ETK});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void processEtkResponseAsync(string keyLabel, string ETK) {
            this.processEtkResponseAsync(keyLabel, ETK, null);
        }
        
        /// <remarks/>
        public void processEtkResponseAsync(string keyLabel, string ETK, object userState) {
            if ((this.processEtkResponseOperationCompleted == null)) {
                this.processEtkResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessEtkResponseOperationCompleted);
            }
            this.InvokeAsync("processEtkResponse", new object[] {
                        keyLabel,
                        ETK}, this.processEtkResponseOperationCompleted, userState);
        }
        
        private void OnprocessEtkResponseOperationCompleted(object arg) {
            if ((this.processEtkResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processEtkResponseCompleted(this, new processEtkResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus deleteKeyStore(string keyLabel) {
            object[] results = this.Invoke("deleteKeyStore", new object[] {
                        keyLabel});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void deleteKeyStoreAsync(string keyLabel) {
            this.deleteKeyStoreAsync(keyLabel, null);
        }
        
        /// <remarks/>
        public void deleteKeyStoreAsync(string keyLabel, object userState) {
            if ((this.deleteKeyStoreOperationCompleted == null)) {
                this.deleteKeyStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteKeyStoreOperationCompleted);
            }
            this.InvokeAsync("deleteKeyStore", new object[] {
                        keyLabel}, this.deleteKeyStoreOperationCompleted, userState);
        }
        
        private void OndeleteKeyStoreOperationCompleted(object arg) {
            if ((this.deleteKeyStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteKeyStoreCompleted(this, new deleteKeyStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus generateEncryptionKeys(string keyLabel, string pinCode) {
            object[] results = this.Invoke("generateEncryptionKeys", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void generateEncryptionKeysAsync(string keyLabel, string pinCode) {
            this.generateEncryptionKeysAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void generateEncryptionKeysAsync(string keyLabel, string pinCode, object userState) {
            if ((this.generateEncryptionKeysOperationCompleted == null)) {
                this.generateEncryptionKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateEncryptionKeysOperationCompleted);
            }
            this.InvokeAsync("generateEncryptionKeys", new object[] {
                        keyLabel,
                        pinCode}, this.generateEncryptionKeysOperationCompleted, userState);
        }
        
        private void OngenerateEncryptionKeysOperationCompleted(object arg) {
            if ((this.generateEncryptionKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateEncryptionKeysCompleted(this, new generateEncryptionKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus verifyEtk(string keyLabel, string pinCode) {
            object[] results = this.Invoke("verifyEtk", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void verifyEtkAsync(string keyLabel, string pinCode) {
            this.verifyEtkAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void verifyEtkAsync(string keyLabel, string pinCode, object userState) {
            if ((this.verifyEtkOperationCompleted == null)) {
                this.verifyEtkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifyEtkOperationCompleted);
            }
            this.InvokeAsync("verifyEtk", new object[] {
                        keyLabel,
                        pinCode}, this.verifyEtkOperationCompleted, userState);
        }
        
        private void OnverifyEtkOperationCompleted(object arg) {
            if ((this.verifyEtkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifyEtkCompleted(this, new verifyEtkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus verifyEncodingCertificate(string keyLabel, string pinCode) {
            object[] results = this.Invoke("verifyEncodingCertificate", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void verifyEncodingCertificateAsync(string keyLabel, string pinCode) {
            this.verifyEncodingCertificateAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void verifyEncodingCertificateAsync(string keyLabel, string pinCode, object userState) {
            if ((this.verifyEncodingCertificateOperationCompleted == null)) {
                this.verifyEncodingCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifyEncodingCertificateOperationCompleted);
            }
            this.InvokeAsync("verifyEncodingCertificate", new object[] {
                        keyLabel,
                        pinCode}, this.verifyEncodingCertificateOperationCompleted, userState);
        }
        
        private void OnverifyEncodingCertificateOperationCompleted(object arg) {
            if ((this.verifyEncodingCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifyEncodingCertificateCompleted(this, new verifyEncodingCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus verifyAuthenticationCertificate(string keyLabel, string pinCode) {
            object[] results = this.Invoke("verifyAuthenticationCertificate", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void verifyAuthenticationCertificateAsync(string keyLabel, string pinCode) {
            this.verifyAuthenticationCertificateAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void verifyAuthenticationCertificateAsync(string keyLabel, string pinCode, object userState) {
            if ((this.verifyAuthenticationCertificateOperationCompleted == null)) {
                this.verifyAuthenticationCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifyAuthenticationCertificateOperationCompleted);
            }
            this.InvokeAsync("verifyAuthenticationCertificate", new object[] {
                        keyLabel,
                        pinCode}, this.verifyAuthenticationCertificateOperationCompleted, userState);
        }
        
        private void OnverifyAuthenticationCertificateOperationCompleted(object arg) {
            if ((this.verifyAuthenticationCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifyAuthenticationCertificateCompleted(this, new verifyAuthenticationCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus generateAuthenticationKeys(string keyLabel, string pinCode, bool arg2) {
            object[] results = this.Invoke("generateAuthenticationKeys", new object[] {
                        keyLabel,
                        pinCode,
                        arg2});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void generateAuthenticationKeysAsync(string keyLabel, string pinCode, bool arg2) {
            this.generateAuthenticationKeysAsync(keyLabel, pinCode, arg2, null);
        }
        
        /// <remarks/>
        public void generateAuthenticationKeysAsync(string keyLabel, string pinCode, bool arg2, object userState) {
            if ((this.generateAuthenticationKeysOperationCompleted == null)) {
                this.generateAuthenticationKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateAuthenticationKeysOperationCompleted);
            }
            this.InvokeAsync("generateAuthenticationKeys", new object[] {
                        keyLabel,
                        pinCode,
                        arg2}, this.generateAuthenticationKeysOperationCompleted, userState);
        }
        
        private void OngenerateAuthenticationKeysOperationCompleted(object arg) {
            if ((this.generateAuthenticationKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateAuthenticationKeysCompleted(this, new generateAuthenticationKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus prepareAuthenticationCertificateRequest(string keyLabel, string pinCode, string idCardSignature, bool CA) {
            object[] results = this.Invoke("prepareAuthenticationCertificateRequest", new object[] {
                        keyLabel,
                        pinCode,
                        idCardSignature,
                        CA});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void prepareAuthenticationCertificateRequestAsync(string keyLabel, string pinCode, string idCardSignature, bool CA) {
            this.prepareAuthenticationCertificateRequestAsync(keyLabel, pinCode, idCardSignature, CA, null);
        }
        
        /// <remarks/>
        public void prepareAuthenticationCertificateRequestAsync(string keyLabel, string pinCode, string idCardSignature, bool CA, object userState) {
            if ((this.prepareAuthenticationCertificateRequestOperationCompleted == null)) {
                this.prepareAuthenticationCertificateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprepareAuthenticationCertificateRequestOperationCompleted);
            }
            this.InvokeAsync("prepareAuthenticationCertificateRequest", new object[] {
                        keyLabel,
                        pinCode,
                        idCardSignature,
                        CA}, this.prepareAuthenticationCertificateRequestOperationCompleted, userState);
        }
        
        private void OnprepareAuthenticationCertificateRequestOperationCompleted(object arg) {
            if ((this.prepareAuthenticationCertificateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.prepareAuthenticationCertificateRequestCompleted(this, new prepareAuthenticationCertificateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://operations.ehealth.mproxy.cmp.com/", ResponseNamespace="http://operations.ehealth.mproxy.cmp.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public mproxyOperationStatus createEmptyKeyStore(string keyLabel, string pinCode) {
            object[] results = this.Invoke("createEmptyKeyStore", new object[] {
                        keyLabel,
                        pinCode});
            return ((mproxyOperationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void createEmptyKeyStoreAsync(string keyLabel, string pinCode) {
            this.createEmptyKeyStoreAsync(keyLabel, pinCode, null);
        }
        
        /// <remarks/>
        public void createEmptyKeyStoreAsync(string keyLabel, string pinCode, object userState) {
            if ((this.createEmptyKeyStoreOperationCompleted == null)) {
                this.createEmptyKeyStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateEmptyKeyStoreOperationCompleted);
            }
            this.InvokeAsync("createEmptyKeyStore", new object[] {
                        keyLabel,
                        pinCode}, this.createEmptyKeyStoreOperationCompleted, userState);
        }
        
        private void OncreateEmptyKeyStoreOperationCompleted(object arg) {
            if ((this.createEmptyKeyStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createEmptyKeyStoreCompleted(this, new createEmptyKeyStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://operations.ehealth.mproxy.cmp.com/")]
    public partial class mproxyOperationStatus {
        
        private string detailedInfoField;
        
        private string operationOutputValueField;
        
        private mproxyOperationResult operationResultField;
        
        private bool operationResultFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string detailedInfo {
            get {
                return this.detailedInfoField;
            }
            set {
                this.detailedInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string operationOutputValue {
            get {
                return this.operationOutputValueField;
            }
            set {
                this.operationOutputValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public mproxyOperationResult operationResult {
            get {
                return this.operationResultField;
            }
            set {
                this.operationResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool operationResultSpecified {
            get {
                return this.operationResultFieldSpecified;
            }
            set {
                this.operationResultFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://operations.ehealth.mproxy.cmp.com/")]
    public enum mproxyOperationResult {
        
        /// <remarks/>
        MPROXY_RESULT_OK,
        
        /// <remarks/>
        MPROXY_RESULT_FAILED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void processAuthenticationCertificateResponseCompletedEventHandler(object sender, processAuthenticationCertificateResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class processAuthenticationCertificateResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal processAuthenticationCertificateResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void removeCertificationDataCompletedEventHandler(object sender, removeCertificationDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeCertificationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeCertificationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void importPKCS12KeyStoreCompletedEventHandler(object sender, importPKCS12KeyStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importPKCS12KeyStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importPKCS12KeyStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void retrieveCertificateCompletedEventHandler(object sender, retrieveCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getLastSuccessfullOperationCompletedEventHandler(object sender, getLastSuccessfullOperationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastSuccessfullOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastSuccessfullOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getKeyStoreRootPathCompletedEventHandler(object sender, getKeyStoreRootPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getKeyStoreRootPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getKeyStoreRootPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void prepareEtkRequestCompletedEventHandler(object sender, prepareEtkRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class prepareEtkRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal prepareEtkRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void processEtkResponseCompletedEventHandler(object sender, processEtkResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class processEtkResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal processEtkResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void deleteKeyStoreCompletedEventHandler(object sender, deleteKeyStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteKeyStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteKeyStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void generateEncryptionKeysCompletedEventHandler(object sender, generateEncryptionKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateEncryptionKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal generateEncryptionKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void verifyEtkCompletedEventHandler(object sender, verifyEtkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifyEtkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifyEtkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void verifyEncodingCertificateCompletedEventHandler(object sender, verifyEncodingCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifyEncodingCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifyEncodingCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void verifyAuthenticationCertificateCompletedEventHandler(object sender, verifyAuthenticationCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifyAuthenticationCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifyAuthenticationCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void generateAuthenticationKeysCompletedEventHandler(object sender, generateAuthenticationKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateAuthenticationKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal generateAuthenticationKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void prepareAuthenticationCertificateRequestCompletedEventHandler(object sender, prepareAuthenticationCertificateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class prepareAuthenticationCertificateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal prepareAuthenticationCertificateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void createEmptyKeyStoreCompletedEventHandler(object sender, createEmptyKeyStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createEmptyKeyStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createEmptyKeyStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public mproxyOperationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((mproxyOperationStatus)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591